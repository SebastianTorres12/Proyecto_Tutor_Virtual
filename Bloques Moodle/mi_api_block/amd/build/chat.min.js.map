{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable promise/always-return */\n/* eslint-disable promise/no-nesting */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\ndefine(['jquery'], function($) {\n    // Definición de variables generales para las APIs\n    const API_tutor = 'http://localhost:8000/generar';\n    const API_BD_TUTOR_BASE = 'http://localhost:8080/api/';\n    const API_Moodle = 'http://localhost/webservice/rest/server.php';\n\n    /**\n     * Detecta si el texto es un saludo o mensaje irrelevante.\n     * @param {string} texto\n     * @returns {boolean}\n     */\n    function esSaludoOMensajeIrrelevante(texto) {\n        const saludos = [\n            'hola', 'buenos dias', 'buenas tardes', 'buenas noches',\n            'hello', 'hi', 'saludos', 'que tal', 'cómo estás', 'como estas'\n        ];\n        const textoLimpio = texto.trim().toLowerCase();\n        return saludos.some(saludo => textoLimpio === saludo || textoLimpio.startsWith(saludo));\n    }\n\n    /**\n     * Obtiene el contexto del estudiante (notas y actividades) y lo guarda en sessionStorage.\n     * Si forceRefresh=true, fuerza la actualización desde la API.\n     * @param {number} userid\n     * @param {number} courseid\n     * @param {boolean} [forceRefresh]\n     * @returns {Promise<Array>}\n     */\n    function obtenerContextoEstudiante(userid, courseid, forceRefresh) {\n        return new Promise(function(resolve) {\n            var contextoKey = 'contexto_estudiante_' + userid + '_' + courseid;\n            if (!forceRefresh) {\n                var contextoGuardado = sessionStorage.getItem(contextoKey);\n                if (contextoGuardado) {\n                    try {\n                        var notas = JSON.parse(contextoGuardado);\n                        resolve(notas);\n                        return;\n                    } catch (e) {\n                        // Si hay error al parsear, continúa para obtenerlo de la API\n                    }\n                }\n            }\n            var params = {\n                wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                wsfunction: 'gradereport_user_get_grade_items',\n                moodlewsrestformat: 'json',\n                courseid: courseid,\n                userid: userid\n            };\n            $.ajax({\n                url: `${API_Moodle}?${$.param(params)}`,\n                method: 'GET',\n                dataType: 'json',\n                success: function(data) {\n                    var notas = [];\n                    if (data.usergrades) {\n                        data.usergrades.forEach(user => {\n                            user.gradeitems.forEach(item => {\n                                if (item.itemname) {\n                                    var grade = item.graderaw !== null ? item.graderaw : 0;\n                                    notas.push({\n                                        userid: user.userid,\n                                        name: user.userfullname,\n                                        grade: grade,\n                                        actividad: item.itemname\n                                    });\n                                }\n                            });\n                        });\n                    }\n                    sessionStorage.setItem(contextoKey, JSON.stringify(notas));\n                    resolve(notas);\n                },\n                error: function() {\n                    resolve([]);\n                }\n            });\n        });\n    }\n\n    return {\n        init: function(userid, courseid, role) {\n            var messagesDiv = $('#chat-messages');\n            var form = $('#chat-form');\n            var chatInput = $('#chat-input');\n            var submitButton = form.find('button[type=\"submit\"]');\n            var isChatBlocked = false;\n\n            function scrollToBottom() {\n                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n            }\n\n            function showDebug(msg) {\n                messagesDiv.append('<p><strong>Debug:</strong> ' + msg + '</p>');\n                scrollToBottom();\n            }\n\n            function showUser(msg) {\n                var bubble = $('<div class=\"chat-bubble user-bubble\"></div>').html('<span>' + $('<div>').text(msg).html() + '</span>');\n                messagesDiv.append(bubble);\n                scrollToBottom();\n            }\n\n            // Animación de \"escritura\" para el tutor\n            function animateTutorMessage(htmlMsg) {\n                var bubble = $('<div class=\"chat-bubble tutor-bubble\"></div>');\n                bubble.append('<span></span>');\n                messagesDiv.append(bubble);\n                scrollToBottom();\n                // Permitir etiquetas seguras: <br>, <b>, <i>, <pre>, <code>\n                var safeHtml = htmlMsg\n                    .replace(/```([a-zA-Z]*)\\n([\\s\\S]*?)```/g, function(match, lang, code) {\n                        return '<pre><code>' + $('<div>').text(code).html() + '</code></pre>';\n                    })\n                    .replace(/\\n/g, '<br>')\n                    .replace(/<(?!br\\s*\\/?>|b>|\\/b>|i>|\\/i>|pre>|\\/pre>|code>|\\/code>)[^>]+>/gi, '');\n                var i = 0;\n                function typeChar() {\n                    if (i <= safeHtml.length) {\n                        bubble.find('span').html(safeHtml.slice(0, i));\n                        scrollToBottom();\n                        i++;\n                        setTimeout(typeChar, 12);\n                    } else {\n                        bubble.find('span').html(safeHtml);\n                        scrollToBottom();\n                    }\n                }\n                typeChar();\n            }\n\n            function showTutor(msg) {\n                animateTutorMessage(msg);\n            }\n\n            /**\n             * Registra al usuario en la API si no existe.\n             */\n            function registrarUsuario() {\n                showDebug('Verificando si el usuario ya está registrado...');\n                $.ajax({\n                    url: `${API_BD_TUTOR_BASE}users/${userid}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function(response) {\n                        console.log('Usuario encontrado en la API:', response);\n                        showDebug('Usuario ya registrado en la API: ' + response.username);\n                        localStorage.setItem('user_registered_' + userid, 'true');\n                    },\n                    error: function(xhr) {\n                        if (xhr.status === 404) {\n                            showDebug('Usuario no encontrado. Procediendo a registrar...');\n                            // Obtener nombre completo\n                            obtenerContextoEstudiante(userid, courseid, true).then(function(notas) {\n                                var userfullname = 'Usuario Desconocido';\n                                if (notas && notas.length > 0 && notas[0].name) {\n                                    userfullname = notas[0].name;\n                                }\n                                showDebug('Nombre completo del usuario: ' + userfullname);\n                                showDebug('Rol del usuario: ' + role);\n                                $.ajax({\n                                    url: `${API_BD_TUTOR_BASE}users/register`,\n                                    method: 'POST',\n                                    data: JSON.stringify({\n                                        user_id: userid,\n                                        username: 'user_' + userid,\n                                        role: role,\n                                        userfullname: userfullname\n                                    }),\n                                    contentType: 'application/json',\n                                    success: function(response) {\n                                        console.log('Usuario registrado en la API:', response);\n                                        showDebug('Usuario registrado en la API.');\n                                        localStorage.setItem('user_registered_' + userid, 'true');\n                                    },\n                                    error: function(xhr, status, error) {\n                                        showDebug('Error al registrar usuario: ' + error);\n                                    }\n                                });\n                            }).catch(function(error) {\n                                showDebug('Error al obtener contexto del estudiante: ' + error);\n                            });\n                        } else {\n                            showDebug('Error al verificar usuario: ' + xhr.status);\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Verifica si hay un intento de cuestionario en curso y bloquea el chat si es necesario.\n             */\n            function verificarIntentosCuestionario(callback) {\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'gradereport_user_get_grade_items',\n                    moodlewsrestformat: 'json',\n                    courseid: courseid,\n                    userid: userid\n                };\n                showDebug('Verificando intentos de cuestionarios...');\n                $.ajax({\n                    url: `${API_Moodle}?${$.param(params)}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function(data) {\n                        var actividades = [];\n                        if (data.usergrades) {\n                            data.usergrades.forEach(user => {\n                                user.gradeitems.forEach(item => {\n                                    if (item.itemname && item.cmid) {\n                                        actividades.push({\n                                            cmid: item.cmid,\n                                            name: item.itemname\n                                        });\n                                    }\n                                });\n                            });\n                        }\n                        if (actividades.length === 0) {\n                            showDebug('No se encontraron actividades para verificar.');\n                            if (callback) {\n                                callback();\n                            }\n                            return;\n                        }\n                        var quizzes = [];\n                        var promises = actividades.map(actividad => {\n                            var paramsContext = {\n                                wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                                wsfunction: 'core_course_get_course_module',\n                                moodlewsrestformat: 'json',\n                                cmid: actividad.cmid\n                            };\n                            return $.ajax({\n                                url: `${API_Moodle}?${$.param(paramsContext)}`,\n                                method: 'GET',\n                                dataType: 'json',\n                                success: function(contextData) {\n                                    if (contextData.cm && contextData.cm.modname === 'quiz') {\n                                        quizzes.push({\n                                            quizid: contextData.cm.instance,\n                                            name: actividad.name\n                                        });\n                                    }\n                                }\n                            });\n                        });\n                        Promise.all(promises).then(() => {\n                            if (quizzes.length === 0) {\n                                showDebug('No se encontraron cuestionarios para verificar.');\n                                if (callback) {\n                                    setTimeout(callback, 0);\n                                }\n                                return;\n                            }\n                            var attemptPromises = quizzes.map(quiz => {\n                                var paramsAttempts = {\n                                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                                    wsfunction: 'mod_quiz_get_user_attempts',\n                                    moodlewsrestformat: 'json',\n                                    quizid: quiz.quizid,\n                                    userid: userid,\n                                    status: 'all',\n                                    includepreviews: 0\n                                };\n                                return $.ajax({\n                                    url: `${API_Moodle}?${$.param(paramsAttempts)}`,\n                                    method: 'GET',\n                                    dataType: 'json',\n                                    success: function(attemptData) {\n                                        if (attemptData.attempts && attemptData.attempts.length > 0) {\n                                            var inProgressAttempt = attemptData.attempts.find(attempt => attempt.state === 'inprogress');\n                                            if (inProgressAttempt) {\n                                                isChatBlocked = true;\n                                                showTutor('No puedes enviar mensajes mientras estás realizando un cuestionario en curso.');\n                                                chatInput.prop('disabled', true);\n                                                submitButton.prop('disabled', true);\n                                            }\n                                        }\n                                    }\n                                });\n                            });\n                            Promise.all(attemptPromises).then(() => {\n                                if (!isChatBlocked) {\n                                    showDebug('No se encontraron intentos de cuestionarios en curso.');\n                                    if (callback) {\n                                        setTimeout(callback, 0);\n                                    }\n                                }\n                            }).catch(() => {\n                                showTutor('Error al verificar intentos de cuestionarios.');\n                                if (callback) {\n                                    setTimeout(callback, 0);\n                                }\n                            });\n                        }).catch(() => {\n                            showTutor('Error al verificar actividades.');\n                            if (callback) {\n                                setTimeout(callback, 0);\n                            }\n                        });\n                    },\n                    error: function(xhr, status, error) {\n                        showTutor('Error al obtener actividades: ' + error + ' (Código: ' + xhr.status + ')');\n                        if (callback) {\n                            callback();\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Obtiene las calificaciones y genera recomendaciones.\n             */\n            function obtenerRecomendaciones() {\n                showDebug('Obteniendo calificaciones...');\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'gradereport_user_get_grade_items',\n                    moodlewsrestformat: 'json',\n                    courseid: courseid,\n                    userid: userid\n                };\n                $.ajax({\n                    url: `${API_Moodle}?${$.param(params)}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function(data) {\n                        var notas = [];\n                        if (data.usergrades) {\n                            data.usergrades.forEach(user => {\n                                user.gradeitems.forEach(item => {\n                                    if (item.itemname) {\n                                        var grade = item.graderaw !== null ? item.graderaw : 0;\n                                        if (grade > 0) {\n                                            notas.push({\n                                                userid: user.userid,\n                                                name: user.userfullname,\n                                                grade: grade,\n                                                actividad: item.itemname\n                                            });\n                                        }\n                                    }\n                                });\n                            });\n                        }\n                        if (notas.length === 0) {\n                            showTutor('No hay actividades con notas mayores a 0 para analizar.');\n                            return;\n                        }\n                        var instruccionNotas = \"Actúa como un tutor virtual especializado en la enseñanza de Análisis y Diseño de Software. Tu tarea es analizar las calificaciones de un estudiante y generar recomendaciones personalizadas para mejorar su rendimiento en cada actividad. Recibirás una lista de calificaciones en el formato: [{\\\"userid\\\": number, \\\"name\\\": string, \\\"grade\\\": number, \\\"actividad\\\": string}, ...]. Para cada actividad, evalúa la nota (que está en una escala de 0 a 10) y genera una recomendación específica basada en el rendimiento del estudiante. Si la nota es menor a 5, sugiere acciones para mejorar (por ejemplo, revisar conceptos específicos, practicar más ejercicios, o buscar ayuda adicional). Si la nota está entre 5 y 7, sugiere formas de consolidar el aprendizaje (por ejemplo, profundizar en temas específicos o aplicar conceptos en proyectos prácticos). Si la nota es mayor a 7, felicita al estudiante y sugiere cómo puede seguir avanzando (por ejemplo, explorar temas más avanzados o liderar proyectos). Devuelve las recomendaciones en formato JSON con la siguiente estructura: {\\\"recomendaciones\\\": [{\\\"userid\\\": number, \\\"name\\\": string, \\\"nota\\\": number, \\\"actividad\\\": string, \\\"recomendacion\\\": string}, ...]}. Responde en español.\";\n                        showDebug('Enviando calificaciones a la API...');\n                        $.ajax({\n                            url: API_tutor,\n                            method: 'POST',\n                            data: JSON.stringify({\n                                instruccion: instruccionNotas,\n                                entrada: JSON.stringify(notas),\n                                max_nuevos_tokens: 5000\n                            }),\n                            contentType: 'application/json',\n                            success: function(response) {\n                                if (response.respuesta) {\n                                    var cleanedResponse = response.respuesta\n                                        .replace(/```json\\n/, '')\n                                        .replace(/\\n```/, '')\n                                        .trim();\n                                    try {\n                                        var recomendaciones = JSON.parse(cleanedResponse);\n                                        if (recomendaciones.recomendaciones && recomendaciones.recomendaciones.length > 0) {\n                                            var studentName = recomendaciones.recomendaciones[0].name;\n                                            var mensaje = `Hola ${studentName}, he analizado tus calificaciones. Aquí tienes algunas recomendaciones para mejorar:<br>`;\n                                            recomendaciones.recomendaciones.forEach(rec => {\n                                                mensaje += `- En ${rec.actividad}, obtuviste ${rec.nota}: ${rec.recomendacion}<br>`;\n                                            });\n                                            showTutor(mensaje);\n                                        } else {\n                                            showTutor('Error: No se encontraron recomendaciones en la respuesta.');\n                                        }\n                                    } catch (parseError) {\n                                        showTutor('Error al parsear las recomendaciones: ' + parseError.message);\n                                    }\n                                } else {\n                                    showTutor('Error: Respuesta inválida de la API.');\n                                }\n                            },\n                            error: function(xhr, status, error) {\n                                showTutor('Error al obtener recomendaciones: ' + error);\n                            }\n                        });\n                    },\n                    error: function(xhr, status, error) {\n                        showTutor('Error al obtener calificaciones: ' + error + ' (Código: ' + xhr.status + ')');\n                    }\n                });\n            }\n\n            // Registrar usuario al cargar el bloque\n            registrarUsuario();\n\n            // Verificar intentos de cuestionarios en curso al cargar el bloque\n            verificarIntentosCuestionario();\n\n            // Configurar el botón de escaneo para refrescar contexto y recomendaciones\n            var btnIniciarEscaneo = $('#btn-iniciar-escaneo');\n            if (btnIniciarEscaneo.length) {\n                btnIniciarEscaneo.on('click', function() {\n                    showDebug('Iniciando escaneo del curso...');\n                    // Refresca el contexto en sessionStorage\n                    obtenerContextoEstudiante(userid, courseid, true).then(function() {\n                        verificarIntentosCuestionario(obtenerRecomendaciones);\n                    }).catch(function(error) {\n                        showDebug('Error al refrescar el contexto del estudiante: ' + error);\n                    });\n                });\n            } else {\n                showDebug('Botón de escaneo no encontrado');\n            }\n\n            // Manejo del formulario de chat\n            if (form.length) {\n                form.on('submit', function(e) {\n                    e.preventDefault();\n                    if (isChatBlocked) {\n                        showTutor('No puedes enviar mensajes mientras estás realizando un cuestionario en curso.');\n                        return;\n                    }\n                    var message = chatInput.val();\n                    if (message.trim() === '') {\n                        return;\n                    }\n                    if (esSaludoOMensajeIrrelevante(message)) {\n                        // Mensaje del bot, no del tutor, así que burbuja tipo tutor\n                        var bubble = $('<div class=\"chat-bubble tutor-bubble\"></div>').html('<span>¡Hola! Por favor, realiza preguntas relacionadas con Análisis y Diseño de Software o sobre tu progreso en el curso para que pueda ayudarte mejor.</span>');\n                        messagesDiv.append(bubble);\n                        scrollToBottom();\n                        chatInput.val('');\n                        return;\n                    }\n                    showUser(message);\n                    chatInput.val('');\n                    // Guardar el mensaje del usuario en la API\n                    $.ajax({\n                        url: `${API_BD_TUTOR_BASE}messages/save`,\n                        method: 'POST',\n                        data: JSON.stringify({\n                            user_id: userid,\n                            message_type: 'input',\n                            message_text: message\n                        }),\n                        contentType: 'application/json'\n                    });\n                    showDebug('Obteniendo contexto del estudiante...');\n                    obtenerContextoEstudiante(userid, courseid).then(function(notas) {\n                        var instruccion = \"Actúa como un profesor especializado en Análisis y Diseño de Software. Responde todas las preguntas relacionadas con el tema de forma clara, detallada y estructurada, utilizando ejemplos prácticos y profundizando en las teorías, principios y metodologías que conforman el área. Además, si la pregunta está relacionada con el estudiante, sus calificaciones o su progreso, utiliza el siguiente contexto del estudiante para personalizar tu respuesta. Si el mensaje no está relacionado con Análisis y Diseño de Software o el curso, responde que solo puedes ayudar en esos temas. Responde en español de manera técnica, pero accesible para estudiantes. CONTEXTO_ESTUDIANTE: \" + JSON.stringify(notas);\n                        $.ajax({\n                            url: API_tutor,\n                            method: 'POST',\n                            data: JSON.stringify({\n                                instruccion: instruccion,\n                                entrada: message,\n                                max_nuevos_tokens: 1000\n                            }),\n                            contentType: 'application/json',\n                            success: function(response) {\n                                var tutorResponse = response.respuesta;\n                                showTutor(tutorResponse);\n                                // Guardar la respuesta del tutor en la API\n                                $.ajax({\n                                    url: `${API_BD_TUTOR_BASE}messages/save`,\n                                    method: 'POST',\n                                    data: JSON.stringify({\n                                        user_id: userid,\n                                        message_type: 'output',\n                                        message_text: tutorResponse\n                                    }),\n                                    contentType: 'application/json'\n                                });\n                            },\n                            error: function(xhr, status, error) {\n                                showTutor('Error al conectar con la API: ' + error);\n                            }\n                        });\n                    }).catch(function(error) {\n                        showTutor('Error al obtener el contexto del estudiante: ' + error);\n                    });\n                });\n            } else {\n                showDebug('Formulario no encontrado');\n            }\n        }\n    };\n});"],"names":["define","$","API_tutor","API_Moodle","obtenerContextoEstudiante","userid","courseid","forceRefresh","Promise","resolve","contextoKey","contextoGuardado","sessionStorage","getItem","notas","JSON","parse","e","params","wstoken","wsfunction","moodlewsrestformat","ajax","url","param","method","dataType","success","data","usergrades","forEach","user","gradeitems","item","itemname","grade","graderaw","push","name","userfullname","actividad","setItem","stringify","error","init","role","messagesDiv","form","chatInput","submitButton","find","isChatBlocked","scrollToBottom","scrollTop","scrollHeight","showDebug","msg","append","showTutor","htmlMsg","bubble","safeHtml","replace","match","lang","code","text","html","i","typeChar","length","slice","setTimeout","animateTutorMessage","verificarIntentosCuestionario","callback","actividades","cmid","quizzes","promises","map","paramsContext","contextData","cm","modname","quizid","instance","all","then","attemptPromises","quiz","paramsAttempts","status","includepreviews","attemptData","attempts","attempt","state","prop","catch","xhr","obtenerRecomendaciones","instruccion","entrada","max_nuevos_tokens","contentType","response","respuesta","cleanedResponse","trim","recomendaciones","mensaje","rec","nota","recomendacion","parseError","message","console","log","username","localStorage","user_id","btnIniciarEscaneo","on","preventDefault","val","texto","textoLimpio","toLowerCase","some","saludo","startsWith","esSaludoOMensajeIrrelevante","showUser","message_type","message_text","tutorResponse"],"mappings":"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"}