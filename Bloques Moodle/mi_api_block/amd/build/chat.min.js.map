{"version":3,"file":"chat.min.js","sources":["../src/chat.js"],"sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable promise/always-return */\n/* eslint-disable promise/no-nesting */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\ndefine(['jquery'], function($) {\n    // Definición de variables generales para las APIs\n    const API_tutor = 'http://localhost:8000/generar';\n    const API_BD_TUTOR_BASE = 'http://localhost:8080/api/';\n    const API_Moodle = 'http://localhost/webservice/rest/server.php';\n\n    /**\n     * Detecta si el texto es un saludo o mensaje irrelevante.\n     * @param {string} texto\n     * @returns {boolean}\n     */\n    function esSaludoOMensajeIrrelevante(texto) {\n        const saludos = [\n            'hola', 'buenos dias', 'buenas tardes', 'buenas noches',\n            'hello', 'hi', 'saludos', 'que tal', 'cómo estás', 'como estas'\n        ];\n        const textoLimpio = texto.trim().toLowerCase();\n        return saludos.some(saludo => textoLimpio === saludo || textoLimpio.startsWith(saludo));\n    }\n\n    /**\n     * Obtiene el contexto del estudiante (notas y actividades) y lo guarda en sessionStorage.\n     * Si forceRefresh=true, fuerza la actualización desde la API.\n     * @param {number} userid\n     * @param {number} courseid\n     * @param {boolean} [forceRefresh]\n     * @returns {Promise<Array>}\n     */\n    function obtenerContextoEstudiante(userid, courseid, forceRefresh) {\n        return new Promise(function(resolve) {\n            var contextoKey = 'contexto_estudiante_' + userid + '_' + courseid;\n            if (!forceRefresh) {\n                var contextoGuardado = sessionStorage.getItem(contextoKey);\n                if (contextoGuardado) {\n                    try {\n                        var notas = JSON.parse(contextoGuardado);\n                        resolve(notas);\n                        return;\n                    } catch (e) {\n                        // Si hay error al parsear, continúa para obtenerlo de la API\n                    }\n                }\n            }\n            var params = {\n                wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                wsfunction: 'gradereport_user_get_grade_items',\n                moodlewsrestformat: 'json',\n                courseid: courseid,\n                userid: userid\n            };\n            $.ajax({\n                url: `${API_Moodle}?${$.param(params)}`,\n                method: 'GET',\n                dataType: 'json',\n                success: function(data) {\n                    var notas = [];\n                    if (data.usergrades) {\n                        data.usergrades.forEach(user => {\n                            user.gradeitems.forEach(item => {\n                                if (item.itemname) {\n                                    var grade = item.graderaw !== null ? item.graderaw : 0;\n                                    notas.push({\n                                        userid: user.userid,\n                                        name: user.userfullname,\n                                        grade: grade,\n                                        actividad: item.itemname\n                                    });\n                                }\n                            });\n                        });\n                    }\n                    sessionStorage.setItem(contextoKey, JSON.stringify(notas));\n                    resolve(notas);\n                },\n                error: function() {\n                    resolve([]);\n                }\n            });\n        });\n    }\n\n    return {\n        init: function(userid, courseid, role) {\n            var messagesDiv = $('#chat-messages');\n            var form = $('#chat-form');\n            var chatInput = $('#chat-input');\n            var submitButton = form.find('button[type=\"submit\"]');\n            var isChatBlocked = false;\n\n            function scrollToBottom() {\n                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n            }\n\n            function showUser(msg) {\n                var bubble = $('<div class=\"chat-bubble user-bubble\"></div>').html('<span>' + $('<div>').text(msg).html() + '</span>');\n                messagesDiv.append(bubble);\n                scrollToBottom();\n            }\n\n            // Loader visual para el tutor\n            function showTutorLoader() {\n                var loader = $('<div class=\"chat-bubble tutor-bubble tutor-loader\"></div>').html('<span><em>El tutor está escribiendo...</em></span>');\n                messagesDiv.append(loader);\n                scrollToBottom();\n            }\n            function removeTutorLoader() {\n                messagesDiv.find('.tutor-loader').remove();\n            }\n\n            // Animación de \"escritura\" para el tutor\n            function animateTutorMessage(htmlMsg) {\n                removeTutorLoader();\n                var bubble = $('<div class=\"chat-bubble tutor-bubble\"></div>');\n                bubble.append('<span></span>');\n                messagesDiv.append(bubble);\n                scrollToBottom();\n                // Permitir etiquetas seguras: <br>, <b>, <i>, <pre>, <code>\n                var safeHtml = htmlMsg\n                    .replace(/```([a-zA-Z]*)\\n([\\s\\S]*?)```/g, function(match, lang, code) {\n                        return '<pre><code>' + $('<div>').text(code).html() + '</code></pre>';\n                    })\n                    .replace(/\\n/g, '<br>')\n                    .replace(/<(?!br\\s*\\/?>|b>|\\/b>|i>|\\/i>|pre>|\\/pre>|code>|\\/code>)[^>]+>/gi, '');\n                var i = 0;\n                function typeChar() {\n                    if (i <= safeHtml.length) {\n                        bubble.find('span').html(safeHtml.slice(0, i));\n                        scrollToBottom();\n                        i++;\n                        setTimeout(typeChar, 12);\n                    } else {\n                        bubble.find('span').html(safeHtml);\n                        scrollToBottom();\n                    }\n                }\n                typeChar();\n            }\n\n            function showTutor(msg) {\n                animateTutorMessage(msg);\n            }\n\n            /**\n             * Registra al usuario en la API si no existe.\n             */\n            function registrarUsuario() {\n                $.ajax({\n                    url: `${API_BD_TUTOR_BASE}users/${userid}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function() {\n                        // Usuario encontrado, no se hace nada\n                        localStorage.setItem('user_registered_' + userid, 'true');\n                    },\n                    error: function(xhr) {\n                        if (xhr.status === 404) {\n                            // Usuario no encontrado, se procede a registrar\n                            // Obtener nombre completo\n                            obtenerContextoEstudiante(userid, courseid, true).then(function(notas) {\n                                var userfullname = 'Usuario Desconocido';\n                                if (notas && notas.length > 0 && notas[0].name) {\n                                    userfullname = notas[0].name;\n                                }\n                                $.ajax({\n                                    url: `${API_BD_TUTOR_BASE}users/register`,\n                                    method: 'POST',\n                                    data: JSON.stringify({\n                                        user_id: userid,\n                                        username: 'user_' + userid,\n                                        role: role,\n                                        userfullname: userfullname\n                                    }),\n                                    contentType: 'application/json',\n                                    success: function() {\n                                        localStorage.setItem('user_registered_' + userid, 'true');\n                                    },\n                                    error: function() {\n                                        // Error al registrar usuario\n                                    }\n                                });\n                            }).catch(function() {\n                                // Error al obtener contexto del estudiante\n                            });\n                        } else {\n                            // Error al verificar usuario\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Verifica si hay un intento de cuestionario en curso y bloquea el chat si es necesario.\n             */\n            function verificarIntentosCuestionario(callback) {\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'gradereport_user_get_grade_items',\n                    moodlewsrestformat: 'json',\n                    courseid: courseid,\n                    userid: userid\n                };\n                $.ajax({\n                    url: `${API_Moodle}?${$.param(params)}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function(data) {\n                        var actividades = [];\n                        if (data.usergrades) {\n                            data.usergrades.forEach(user => {\n                                user.gradeitems.forEach(item => {\n                                    if (item.itemname && item.cmid) {\n                                        actividades.push({\n                                            cmid: item.cmid,\n                                            name: item.itemname\n                                        });\n                                    }\n                                });\n                            });\n                        }\n                        if (actividades.length === 0) {\n                            if (callback) {\n                                callback();\n                            }\n                            return;\n                        }\n                        var quizzes = [];\n                        var promises = actividades.map(actividad => {\n                            var paramsContext = {\n                                wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                                wsfunction: 'core_course_get_course_module',\n                                moodlewsrestformat: 'json',\n                                cmid: actividad.cmid\n                            };\n                            return $.ajax({\n                                url: `${API_Moodle}?${$.param(paramsContext)}`,\n                                method: 'GET',\n                                dataType: 'json',\n                                success: function(contextData) {\n                                    if (contextData.cm && contextData.cm.modname === 'quiz') {\n                                        quizzes.push({\n                                            quizid: contextData.cm.instance,\n                                            name: actividad.name\n                                        });\n                                    }\n                                }\n                            });\n                        });\n                        Promise.all(promises).then(() => {\n                            if (quizzes.length === 0) {\n                                if (callback) {\n                                    setTimeout(callback, 0);\n                                }\n                                return;\n                            }\n                            var attemptPromises = quizzes.map(quiz => {\n                                var paramsAttempts = {\n                                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                                    wsfunction: 'mod_quiz_get_user_attempts',\n                                    moodlewsrestformat: 'json',\n                                    quizid: quiz.quizid,\n                                    userid: userid,\n                                    status: 'all',\n                                    includepreviews: 0\n                                };\n                                return $.ajax({\n                                    url: `${API_Moodle}?${$.param(paramsAttempts)}`,\n                                    method: 'GET',\n                                    dataType: 'json',\n                                    success: function(attemptData) {\n                                        if (attemptData.attempts && attemptData.attempts.length > 0) {\n                                            var inProgressAttempt = attemptData.attempts.find(attempt => attempt.state === 'inprogress');\n                                            if (inProgressAttempt) {\n                                                isChatBlocked = true;\n                                                showTutor('No puedes enviar mensajes mientras estás realizando un cuestionario en curso.');\n                                                chatInput.prop('disabled', true);\n                                                submitButton.prop('disabled', true);\n                                            }\n                                        }\n                                    }\n                                });\n                            });\n                            Promise.all(attemptPromises).then(() => {\n                                if (!isChatBlocked) {\n                                    if (callback) {\n                                        setTimeout(callback, 0);\n                                    }\n                                }\n                            }).catch(() => {\n                                showTutor('Error al verificar intentos de cuestionarios.');\n                                if (callback) {\n                                    setTimeout(callback, 0);\n                                }\n                            });\n                        }).catch(() => {\n                            showTutor('Error al verificar actividades.');\n                            if (callback) {\n                                setTimeout(callback, 0);\n                            }\n                        });\n                    },\n                    error: function(xhr, status, error) {\n                        showTutor('Error al obtener actividades: ' + error + ' (Código: ' + xhr.status + ')');\n                        if (callback) {\n                            callback();\n                        }\n                    }\n                });\n            }\n\n            /**\n             * Obtiene las calificaciones y genera recomendaciones.\n             */\n            function obtenerRecomendaciones() {\n                showTutorLoader();\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'gradereport_user_get_grade_items',\n                    moodlewsrestformat: 'json',\n                    courseid: courseid,\n                    userid: userid\n                };\n                $.ajax({\n                    url: `${API_Moodle}?${$.param(params)}`,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function(data) {\n                        var notas = [];\n                        if (data.usergrades) {\n                            data.usergrades.forEach(user => {\n                                user.gradeitems.forEach(item => {\n                                    if (item.itemname) {\n                                        var grade = item.graderaw !== null ? item.graderaw : 0;\n                                        if (grade > 0) {\n                                            notas.push({\n                                                userid: user.userid,\n                                                name: user.userfullname,\n                                                grade: grade,\n                                                actividad: item.itemname\n                                            });\n                                        }\n                                    }\n                                });\n                            });\n                        }\n                        if (notas.length === 0) {\n                            removeTutorLoader();\n                            showTutor('No hay actividades con notas mayores a 0 para analizar.');\n                            return;\n                        }\n                        var instruccionNotas = \"Actúa como un tutor virtual especializado en la enseñanza de Análisis y Diseño de Software. Tu tarea es analizar las calificaciones de un estudiante y generar recomendaciones personalizadas para mejorar su rendimiento en cada actividad. Recibirás una lista de calificaciones en el formato: [{\\\"userid\\\": number, \\\"name\\\": string, \\\"grade\\\": number, \\\"actividad\\\": string}, ...]. Para cada actividad, evalúa la nota (que está en una escala de 0 a 10) y genera una recomendación específica basada en el rendimiento del estudiante. Si la nota es menor a 5, sugiere acciones para mejorar (por ejemplo, revisar conceptos específicos, practicar más ejercicios, o buscar ayuda adicional). Si la nota está entre 5 y 7, sugiere formas de consolidar el aprendizaje (por ejemplo, profundizar en temas específicos o aplicar conceptos en proyectos prácticos). Si la nota es mayor a 7, felicita al estudiante y sugiere cómo puede seguir avanzando (por ejemplo, explorar temas más avanzados o liderar proyectos). Devuelve las recomendaciones en formato JSON con la siguiente estructura: {\\\"recomendaciones\\\": [{\\\"userid\\\": number, \\\"name\\\": string, \\\"grade\\\": number, \\\"actividad\\\": string, \\\"recomendacion\\\": string}, ...]}. Responde en español.\";\n                        $.ajax({\n                            url: API_tutor,\n                            method: 'POST',\n                            data: JSON.stringify({\n                                instruccion: instruccionNotas,\n                                entrada: JSON.stringify(notas),\n                                max_nuevos_tokens: 5000\n                            }),\n                            contentType: 'application/json',\n                            success: function(response) {\n                                removeTutorLoader();\n                                if (response.respuesta) {\n                                    var cleanedResponse = response.respuesta\n                                        .replace(/```json\\n/, '')\n                                        .replace(/\\n```/, '')\n                                        .trim();\n                                    try {\n                                        var recomendaciones = JSON.parse(cleanedResponse);\n                                        if (recomendaciones.recomendaciones && recomendaciones.recomendaciones.length > 0) {\n                                            var studentName = recomendaciones.recomendaciones[0].name;\n                                            var mensaje = `Hola ${studentName}, he analizado tus calificaciones. Aquí tienes algunas recomendaciones para mejorar:<br>`;\n                                            recomendaciones.recomendaciones.forEach(rec => {\n                                                // Usar rec.grade (no rec.nota)\n                                                mensaje += `- En ${rec.actividad}, obtuviste ${rec.grade}: ${rec.recomendacion}<br>`;\n                                            });\n                                            showTutor(mensaje);\n                                        } else {\n                                            showTutor('No se han obtenido recomendaciones para mostrar.');\n                                        }\n                                    } catch (parseError) {\n                                        showTutor('Error al parsear las recomendaciones: ' + parseError.message);\n                                    }\n                                } else {\n                                    showTutor('Error: Respuesta inválida de la API.');\n                                }\n                            },\n                            error: function(xhr, status, error) {\n                                removeTutorLoader();\n                                showTutor('Error al obtener recomendaciones: ' + error);\n                            }\n                        });\n                    },\n                    error: function(xhr, status, error) {\n                        removeTutorLoader();\n                        showTutor('Error al obtener calificaciones: ' + error + ' (Código: ' + xhr.status + ')');\n                    }\n                });\n            }\n\n            // Registrar usuario al cargar el bloque\n            registrarUsuario();\n\n            // Verificar intentos de cuestionarios en curso al cargar el bloque\n            verificarIntentosCuestionario();\n\n            // Configurar el botón de escaneo para refrescar contexto y recomendaciones\n            var btnIniciarEscaneo = $('#btn-iniciar-escaneo');\n            if (btnIniciarEscaneo.length) {\n                btnIniciarEscaneo.on('click', function() {\n                    // Refresca el contexto en sessionStorage\n                    obtenerContextoEstudiante(userid, courseid, true).then(function() {\n                        verificarIntentosCuestionario(obtenerRecomendaciones);\n                    }).catch(function() {\n                        // Error al refrescar el contexto del estudiante\n                    });\n                });\n            } else {\n                // Botón de escaneo no encontrado\n            }\n\n            // Manejo del formulario de chat\n            if (form.length) {\n                form.on('submit', function(e) {\n                    e.preventDefault();\n                    if (isChatBlocked) {\n                        showTutor('No puedes enviar mensajes mientras estás realizando un cuestionario en curso.');\n                        return;\n                    }\n                    var message = chatInput.val();\n                    if (message.trim() === '') {\n                        return;\n                    }\n                    if (esSaludoOMensajeIrrelevante(message)) {\n                        // Mensaje del bot, no del tutor, así que burbuja tipo tutor\n                        var bubble = $('<div class=\"chat-bubble tutor-bubble\"></div>').html('<span>¡Hola! Por favor, realiza preguntas relacionadas con Análisis y Diseño de Software o sobre tu progreso en el curso para que pueda ayudarte mejor.</span>');\n                        messagesDiv.append(bubble);\n                        scrollToBottom();\n                        chatInput.val('');\n                        return;\n                    }\n                    showUser(message);\n                    chatInput.val('');\n                    // Guardar el mensaje del usuario en la API\n                    $.ajax({\n                        url: `${API_BD_TUTOR_BASE}messages/save`,\n                        method: 'POST',\n                        data: JSON.stringify({\n                            user_id: userid,\n                            message_type: 'input',\n                            message_text: message\n                        }),\n                        contentType: 'application/json'\n                    });\n                    showTutorLoader();\n                    obtenerContextoEstudiante(userid, courseid).then(function(notas) {\n                        var instruccion = \"Actúa como un profesor especializado en Análisis y Diseño de Software. Responde todas las preguntas relacionadas con el tema de forma clara, detallada y estructurada, utilizando ejemplos prácticos y profundizando en las teorías, principios y metodologías que conforman el área. Además, si la pregunta está relacionada con el estudiante, sus calificaciones o su progreso, utiliza el siguiente contexto del estudiante para personalizar tu respuesta. Si el mensaje no está relacionado con Análisis y Diseño de Software o el curso, responde que solo puedes ayudar en esos temas. Responde en español de manera técnica, pero accesible para estudiantes. CONTEXTO_ESTUDIANTE: \" + JSON.stringify(notas);\n                        $.ajax({\n                            url: API_tutor,\n                            method: 'POST',\n                            data: JSON.stringify({\n                                instruccion: instruccion,\n                                entrada: message,\n                                max_nuevos_tokens: 1000\n                            }),\n                            contentType: 'application/json',\n                            success: function(response) {\n                                var tutorResponse = response.respuesta;\n                                showTutor(tutorResponse);\n                                // Guardar la respuesta del tutor en la API\n                                $.ajax({\n                                    url: `${API_BD_TUTOR_BASE}messages/save`,\n                                    method: 'POST',\n                                    data: JSON.stringify({\n                                        user_id: userid,\n                                        message_type: 'output',\n                                        message_text: tutorResponse\n                                    }),\n                                    contentType: 'application/json'\n                                });\n                            },\n                            error: function(xhr, status, error) {\n                                showTutor('Error al conectar con la API: ' + error);\n                            }\n                        });\n                    }).catch(function() {\n                        showTutor('Error al obtener el contexto del estudiante.');\n                    });\n                });\n            } else {\n                // Formulario no encontrado\n            }\n        }\n    };\n});"],"names":["define","$","API_tutor","API_Moodle","obtenerContextoEstudiante","userid","courseid","forceRefresh","Promise","resolve","contextoKey","contextoGuardado","sessionStorage","getItem","notas","JSON","parse","e","params","wstoken","wsfunction","moodlewsrestformat","ajax","url","param","method","dataType","success","data","usergrades","forEach","user","gradeitems","item","itemname","grade","graderaw","push","name","userfullname","actividad","setItem","stringify","error","init","role","messagesDiv","form","chatInput","submitButton","find","isChatBlocked","scrollToBottom","scrollTop","scrollHeight","showTutorLoader","loader","html","append","removeTutorLoader","remove","showTutor","msg","htmlMsg","bubble","safeHtml","replace","match","lang","code","text","i","typeChar","length","slice","setTimeout","animateTutorMessage","verificarIntentosCuestionario","callback","actividades","cmid","quizzes","promises","map","paramsContext","contextData","cm","modname","quizid","instance","all","then","attemptPromises","quiz","paramsAttempts","status","includepreviews","attemptData","attempts","attempt","state","prop","catch","xhr","obtenerRecomendaciones","instruccion","entrada","max_nuevos_tokens","contentType","response","respuesta","cleanedResponse","trim","recomendaciones","mensaje","rec","recomendacion","parseError","message","localStorage","user_id","username","btnIniciarEscaneo","on","preventDefault","val","texto","textoLimpio","toLowerCase","some","saludo","startsWith","esSaludoOMensajeIrrelevante","showUser","message_type","message_text","tutorResponse"],"mappings":"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"}