{"version":3,"file":"feedback.min.js","sources":["../src/feedback.js"],"sourcesContent":["/* eslint-disable no-trailing-spaces */\n/* eslint-disable jsdoc/require-param */\n/* eslint-disable max-len */\n/* eslint-disable no-console */\ndefine(['jquery'], function ($) {\n    // Definición de variables generales para las APIs\n    const API_tutor = 'http://localhost:8000/generar'; // API para generar retroalimentación del tutor\n    const API_Moodle = 'http://localhost/webservice/rest/server.php'; // API de Moodle para servicios web\n\n    return {\n        init: function (userid, courseid, cmid, modname) {\n            var messagesDiv = $('#feedback-messages');\n\n            /**\n             * Obtiene la calificación, contenido y respuestas del usuario para la actividad específica.\n             */\n            function obtenerRetroalimentacion() {\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'gradereport_user_get_grade_items',\n                    moodlewsrestformat: 'json',\n                    courseid: courseid,\n                    userid: userid\n                };\n\n                var queryString = $.param(params);\n                var fullUrl = `${API_Moodle}?${queryString}`;\n\n                console.log('URL generada para gradereport_user_get_grade_items:', fullUrl);\n\n                messagesDiv.append('<p><strong>Debug:</strong> Obteniendo calificación de la actividad...</p>');\n                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n\n                $.ajax({\n                    url: fullUrl,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function (data) {\n                        console.log('Respuesta de gradereport_user_get_grade_items:', data);\n\n                        var actividadData = null;\n                        if (data.usergrades) {\n                            data.usergrades.forEach(user => {\n                                user.gradeitems.forEach(item => {\n                                    if (item.cmid == cmid) {\n                                        var grade = item.graderaw !== null ? item.graderaw : 0;\n                                        actividadData = {\n                                            userid: user.userid,\n                                            name: user.userfullname,\n                                            grade: grade,\n                                            actividad: item.itemname,\n                                            feedback: item.feedback || 'Sin retroalimentación del profesor.',\n                                            feedbackformat: item.feedbackformat || 0\n                                        };\n                                    }\n                                });\n                            });\n                        }\n\n                        if (!actividadData) {\n                            messagesDiv.append('<p><strong>Tutor:</strong> No se encontró una calificación para esta actividad o aún no ha sido calificada.</p>');\n                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            return;\n                        }\n\n                        if (actividadData.feedbackformat === 1) {\n                            var tempDiv = $('<div>').html(actividadData.feedback);\n                            actividadData.feedback = tempDiv.text();\n                        }\n\n                        console.log('Datos de la actividad:', actividadData);\n\n                        var paramsContext = {\n                            wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                            wsfunction: 'core_course_get_course_module',\n                            moodlewsrestformat: 'json',\n                            cmid: cmid\n                        };\n\n                        var queryStringContext = $.param(paramsContext);\n                        var fullUrlContext = `${API_Moodle}?${queryStringContext}`;\n\n                        console.log('URL generada para core_course_get_course_module:', fullUrlContext);\n\n                        $.ajax({\n                            url: fullUrlContext,\n                            method: 'GET',\n                            dataType: 'json',\n                            success: function (contextData) {\n                                console.log('Respuesta de core_course_get_course_module:', contextData);\n\n                                if (!contextData.cm || !contextData.cm.instance) {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> No se pudo obtener el ID de la actividad.</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                    return;\n                                }\n\n                                actividadData.id = contextData.cm.instance;\n\n                                if (modname === 'quiz') {\n                                    obtenerDatosCuestionario(actividadData);\n                                } else if (modname === 'assign') {\n                                    obtenerDatosTarea(actividadData);\n                                } else {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> Este tipo de actividad no es compatible para análisis detallado.</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                console.log('Error al obtener contextid:', { xhr, status, error });\n                                messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener contextid: ' + error + '</p>');\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            }\n                        });\n                    },\n                    error: function (xhr, status, error) {\n                        console.log('Error al obtener calificaciones:', { xhr, status, error });\n                        messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener calificaciones: ' + error + ' (Código: ' + xhr.status + ')</p>');\n                        messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                    }\n                });\n            }\n\n            /**\n             * Obtiene las preguntas y respuestas del estudiante para un cuestionario.\n             */\n            function obtenerDatosCuestionario(actividadData) {\n                var params = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'mod_quiz_get_user_attempts',\n                    moodlewsrestformat: 'json',\n                    quizid: actividadData.id,\n                    userid: userid,\n                    status: 'finished'\n                };\n\n                var queryString = $.param(params);\n                var fullUrl = `${API_Moodle}?${queryString}`;\n\n                console.log('URL generada para mod_quiz_get_user_attempts:', fullUrl);\n                console.log('Usuario ID utilizado:', userid);\n\n                $.ajax({\n                    url: fullUrl,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function (data) {\n                        console.log('Respuesta de mod_quiz_get_user_attempts:', data);\n\n                        if (!data.attempts || data.attempts.length === 0) {\n                            messagesDiv.append('<p><strong>Tutor:</strong> No se encontraron intentos para este cuestionario.</p>');\n                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            return;\n                        }\n\n                        var ultimoIntento = data.attempts[data.attempts.length - 1];\n                        var attemptId = ultimoIntento.id;\n                        console.log('Attempt ID seleccionado:', attemptId);\n\n                        // Establecer número máximo de intentos fijo\n                        var maxAttempts = 3;\n                        var attemptsMade = data.attempts.length;\n                        var remainingAttempts = maxAttempts - attemptsMade;\n\n                        if (remainingAttempts < 0) {\n                            remainingAttempts = 0; // Por si hay un error en los datos\n                        }\n\n                        console.log('Intentos realizados:', attemptsMade, 'Intentos máximos:', maxAttempts, 'Intentos restantes:', remainingAttempts);\n                        actividadData.remainingAttempts = remainingAttempts;\n\n                        // Obtener detalles del intento\n                        var paramsAttempt = {\n                            wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                            wsfunction: 'mod_quiz_get_attempt_review',\n                            moodlewsrestformat: 'json',\n                            attemptid: attemptId,\n                            page: -1\n                        };\n\n                        var queryStringAttempt = $.param(paramsAttempt);\n                        var fullUrlAttempt = `${API_Moodle}?${queryStringAttempt}`;\n\n                        console.log('URL generada para mod_quiz_get_attempt_review:', fullUrlAttempt);\n\n                        $.ajax({\n                            url: fullUrlAttempt,\n                            method: 'GET',\n                            dataType: 'json',\n                            success: function (attemptData) {\n                                console.log('Respuesta de mod_quiz_get_attempt_review:', attemptData);\n\n                                if (attemptData.warnings && attemptData.warnings.length > 0) {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> Advertencias: ' + attemptData.warnings[0].message + '</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                    return;\n                                }\n\n                                if (!attemptData.questions || attemptData.questions.length === 0) {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> No se encontraron preguntas en el intento.</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                    return;\n                                }\n\n                                var preguntasIncorrectas = [];\n                                attemptData.questions.forEach(question => {\n                                    var preguntaMatch = question.html.match(/<div class=\"qtext\">(.*?)<\\/div>/is);\n                                    var pregunta = preguntaMatch ? preguntaMatch[1] : 'No se pudo extraer la pregunta';\n\n                                    var numeroPregunta = question.questionnumber || 'Desconocido';\n\n                                    var estado = question.status || 'Desconocido';\n                                    var estadoInterno = question.state || 'unknown';\n\n                                    var respuestaSeleccionadaMatch = question.html.match(/<input[^>]+checked=\"checked\"[^>]*>.*?<div class=\"flex-fill ms-1\">([^<]+)</is);\n                                    var respuestaSeleccionada = respuestaSeleccionadaMatch ? respuestaSeleccionadaMatch[1] : 'No se pudo extraer la respuesta seleccionada';\n\n                                    var respuestaCorrectaMatch = question.html.match(/<div class=\"rightanswer\">La respuesta correcta es: ([^<]+)</is);\n                                    var respuestaCorrecta = respuestaCorrectaMatch ? respuestaCorrectaMatch[1] : 'No se pudo extraer la respuesta correcta';\n\n                                    var opciones = [];\n                                    var opcionesMatches = question.html.matchAll(/<div class=\"flex-fill ms-1\">([^<]+)<\\/div>/gis);\n                                    for (let match of opcionesMatches) {\n                                        opciones.push(match[1]);\n                                    }\n\n                                    if (estado === 'Incorrecta' || estadoInterno === 'gradedwrong') {\n                                        preguntasIncorrectas.push({\n                                            numero: numeroPregunta,\n                                            pregunta: pregunta,\n                                            respuestaSeleccionada: respuestaSeleccionada,\n                                            respuestaCorrecta: respuestaCorrecta,\n                                            opciones: opciones,\n                                            estado: estado\n                                        });\n                                    }\n                                });\n\n                                actividadData.preguntasIncorrectas = preguntasIncorrectas;\n\n                                if (preguntasIncorrectas.length === 0) {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> ¡Felicidades! Respondiste todas las preguntas correctamente.</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                } else {\n                                    enviarDatosParaRetroalimentacion(actividadData);\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                console.log('Error al obtener datos del intento:', { xhr, status, error, responseText: xhr.responseText });\n                                messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener datos del intento: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            }\n                        });\n                    },\n                    error: function (xhr, status, error) {\n                        console.log('Error al obtener intentos:', { xhr, status, error, responseText: xhr.responseText });\n                        messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener intentos: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                        messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                    }\n                });\n            }\n\n            /**\n             * Obtiene el contenido enviado por el estudiante para una tarea.\n             */\n            function obtenerDatosTarea(actividadData) {\n                var paramsAssignment = {\n                    wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                    wsfunction: 'mod_assign_get_assignments',\n                    moodlewsrestformat: 'json',\n                    courseids: [courseid]\n                };\n\n                var queryStringAssignment = $.param(paramsAssignment);\n                var fullUrlAssignment = `${API_Moodle}?${queryStringAssignment}`;\n\n                console.log('URL generada para mod_assign_get_assignments:', fullUrlAssignment);\n\n                $.ajax({\n                    url: fullUrlAssignment,\n                    method: 'GET',\n                    dataType: 'json',\n                    success: function (assignmentData) {\n                        console.log('Respuesta de mod_assign_get_assignments:', assignmentData);\n\n                        var assignment = null;\n                        if (assignmentData.courses && assignmentData.courses.length > 0) {\n                            assignmentData.courses.forEach(course => {\n                                course.assignments.forEach(assign => {\n                                    if (assign.cmid == cmid) {\n                                        assignment = assign;\n                                    }\n                                });\n                            });\n                        }\n\n                        if (!assignment) {\n                            messagesDiv.append('<p><strong>Tutor:</strong> No se encontró información sobre la tarea.</p>');\n                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            return;\n                        }\n\n                        actividadData.title = assignment.name;\n                        actividadData.description = assignment.intro || 'Sin descripción disponible.';\n                        actividadData.introformat = assignment.introformat || 0;\n\n                        if (actividadData.introformat === 1) {\n                            var tempDiv = $('<div>').html(actividadData.description);\n                            actividadData.description = tempDiv.text();\n                        }\n\n                        var paramsSubmission = {\n                            wstoken: '10b97b49ec5c5119e48c566de5228f8f',\n                            wsfunction: 'mod_assign_get_submissions',\n                            moodlewsrestformat: 'json',\n                            assignmentids: [actividadData.id]\n                        };\n\n                        var queryStringSubmission = $.param(paramsSubmission);\n                        var fullUrlSubmission = `${API_Moodle}?${queryStringSubmission}`;\n\n                        console.log('URL generada para mod_assign_get_submissions:', fullUrlSubmission);\n\n                        $.ajax({\n                            url: fullUrlSubmission,\n                            method: 'GET',\n                            dataType: 'json',\n                            success: function (submissionData) {\n                                console.log('Respuesta de mod_assign_get_submissions:', submissionData);\n\n                                var entregaEstudiante = null;\n                                if (submissionData.assignments && submissionData.assignments.length > 0) {\n                                    var submissions = submissionData.assignments[0].submissions;\n                                    entregaEstudiante = submissions.find(sub => sub.userid == userid);\n                                }\n\n                                if (!entregaEstudiante) {\n                                    actividadData.status = 'pendiente';\n                                    actividadData.submissionStatus = 'No entregada';\n                                    enviarDatosParaRetroalimentacion(actividadData);\n                                    return;\n                                }\n\n                                actividadData.status = entregaEstudiante.status || 'entregada';\n                                actividadData.submissionStatus = entregaEstudiante.status === 'submitted' ? 'Entregada' : 'Borrador';\n\n                                if (actividadData.status === 'submitted') {\n                                    if (actividadData.grade > 0) {\n                                        actividadData.status = 'calificada';\n                                    } else {\n                                        actividadData.status = 'entregada_no_calificada';\n                                    }\n                                }\n\n                                enviarDatosParaRetroalimentacion(actividadData);\n                            },\n                            error: function (xhr, status, error) {\n                                console.log('Error al obtener entregas:', { xhr, status, error });\n                                messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener entregas: ' + error + '</p>');\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            }\n                        });\n                    },\n                    error: function (xhr, status, error) {\n                        console.log('Error al obtener datos de la tarea:', { xhr, status, error });\n                        messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener datos de la tarea: ' + error + '</p>');\n                        messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                    }\n                });\n            }\n\n            /**\n             * Envía los datos a la API para obtener retroalimentación detallada.\n             */\n            function enviarDatosParaRetroalimentacion(actividadData) {\n                var instruccionRetro = `\n                    Actúa como un tutor virtual especializado en la enseñanza de Análisis y Diseño de Software. Tu tarea es proporcionar retroalimentación educativa a un estudiante basada en el estado de una tarea. Recibirás los datos en el formato: \n                    {\n                        \"userid\": number, \n                        \"name\": string, \n                        \"grade\": number, \n                        \"actividad\": string, \n                        \"title\": string, \n                        \"description\": string, \n                        \"status\": string (\"pendiente\", \"entregada_no_calificada\", \"calificada\"), \n                        \"submissionStatus\": string, \n                        \"feedback\": string\n                    }\n                    \n                    - Si el estado es \"pendiente\", analiza el título y la descripción de la tarea y proporciona recomendaciones específicas para que el estudiante la complete exitosamente.\n                    - Si el estado es \"entregada_no_calificada\", informa al estudiante que su tarea está en proceso de evaluación y sugiere cómo puede prepararse para futuras tareas similares.\n                    - Si el estado es \"calificada\", analiza la calificación y la retroalimentación del profesor para proporcionar retroalimentación adicional. Explica qué hizo bien el estudiante, qué puede mejorar, y sugiere pasos específicos para futuras tareas.\n                    \n                    Devuelve la retroalimentación en formato texto, en español, con un tono profesional y motivador.\n                `;\n\n                messagesDiv.append('<p><strong>Debug:</strong> Enviando datos a la API para retroalimentación...</p>');\n                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n\n                if (actividadData.preguntasIncorrectas && actividadData.preguntasIncorrectas.length > 0) {\n                    if (actividadData.remainingAttempts > 0) {\n                        // Retroalimentación de apoyo para intentos restantes\n                        var promptApoyo = `\n                            Eres un tutor virtual especializado en Análisis y Diseño de Software. Un estudiante ha respondido incorrectamente algunas preguntas en un cuestionario, pero aún tiene ${actividadData.remainingAttempts} intento(s) restante(s). Proporciona retroalimentación de apoyo que identifique los temas principales de las preguntas incorrectas y ofrezca consejos generales para mejorar, sin revelar las respuestas correctas ni detalles específicos de las preguntas.\n\n                            Preguntas incorrectas:\n                            ${actividadData.preguntasIncorrectas.map((pregunta, index) => `\n                            Pregunta ${index + 1} (Número ${pregunta.numero}): ${pregunta.pregunta}\n                            `).join('\\n')}\n\n                            Identifica los temas principales (por ejemplo, modelado UML, casos de uso, diagramas de clases) y sugiere cómo mejorar en ellos (máximo 150 palabras). Comienza con \"¡No te preocupes, estás progresando!\" y usa un tono motivador. No menciones respuestas correctas ni hagas referencia a libros o materiales externos.\n                        `;\n\n                        console.log('Prompt para retroalimentación de apoyo:', promptApoyo);\n\n                        $.ajax({\n                            url: API_tutor, // Usar variable para endpoint de generación\n                            method: 'POST',\n                            contentType: 'application/json',\n                            data: JSON.stringify({\n                                instruccion: \"Proporciona retroalimentación de apoyo basada en los temas de las preguntas incorrectas.\",\n                                entrada: promptApoyo,\n                                max_nuevos_tokens: 256\n                            }),\n                            success: function (response) {\n                                console.log('Respuesta de la API /generar (apoyo):', response);\n\n                                if (response.respuesta) {\n                                    var retroalimentacionFormateada = response.respuesta.replace(/\\n/g, '<br>');\n                                    var mensaje = `<p><strong>Tutor:</strong><br>${retroalimentacionFormateada}<br>Tienes ${actividadData.remainingAttempts} intento(s) restante(s). ¡Sigue practicando!</p>`;\n                                    messagesDiv.append(mensaje);\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                } else {\n                                    messagesDiv.append('<p><strong>Tutor:</strong> Error: No se pudo generar la retroalimentación de apoyo.</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                }\n                            },\n                            error: function (xhr, status, error) {\n                                console.log('Error al obtener retroalimentación de apoyo:', { xhr, status, error, responseText: xhr.responseText });\n                                messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener retroalimentación de apoyo: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            }\n                        });\n                    } else {\n                        // Retroalimentación detallada y actividad de refuerzo cuando no hay intentos\n                        var promesas = actividadData.preguntasIncorrectas.map(pregunta => {\n                            var prompt = `\n                                Eres un tutor virtual especializado en Análisis y Diseño de Software. Explica por qué la respuesta correcta es adecuada para la siguiente pregunta de un cuestionario, considerando el contexto y las opciones disponibles.\n\n                                **Pregunta**: ${pregunta.pregunta}\n                                **Respuesta seleccionada**: ${pregunta.respuestaSeleccionada} (incorrecta)\n                                **Respuesta correcta**: ${pregunta.respuestaCorrecta}\n                                **Opciones**: ${pregunta.opciones.join(', ')}\n\n                                Explica por qué \"${pregunta.respuestaCorrecta}\" es correcta y por qué \"${pregunta.respuestaSeleccionada}\" no lo es. Usa un lenguaje claro, educativo y motivador (máximo 100 palabras).\n                            `;\n\n                            console.log('Prompt para retroalimentación detallada:', prompt);\n\n                            return $.ajax({\n                                url: API_tutor, // Usar variable para endpoint de generación\n                                method: 'POST',\n                                contentType: 'application/json',\n                                data: JSON.stringify({\n                                    instruccion: \"Proporciona una explicación clara y detallada.\",\n                                    entrada: prompt,\n                                    max_nuevos_tokens: 256\n                                }),\n                                success: function (response) {\n                                    console.log('Respuesta de la API /generar:', response);\n\n                                    if (response.respuesta) {\n                                        var mensaje = `<p><strong>Tutor:</strong> Pregunta ${pregunta.numero}: \"${pregunta.pregunta}\":<br>` +\n                                            `<strong>Respondiste:</strong> \"${pregunta.respuestaSeleccionada}\" (Incorrecta).<br>` +\n                                            `<strong>Correcta:</strong> \"${pregunta.respuestaCorrecta}\".<br>` +\n                                            `<strong>Explicación:</strong> ${response.respuesta}</p>`;\n                                        messagesDiv.append(mensaje);\n                                        messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                    }\n                                },\n                                error: function (xhr, status, error) {\n                                    console.log('Error al obtener retroalimentación detallada:', { xhr, status, error, responseText: xhr.responseText });\n                                    messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener retroalimentación para la Pregunta ${pregunta.numero}: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                                    messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                }\n                            });\n                        });\n\n                        Promise.all(promesas).then(() => {\n                            console.log('Todas las retroalimentaciones detalladas procesadas.');\n\n                            if (actividadData.grade < 7) {\n                                var promptRefuerzo = `\n                                    Eres un tutor virtual especializado en Análisis y Diseño de Software. Un estudiante obtuvo una calificación de ${actividadData.grade} en un cuestionario (escala 0-10). Propón una actividad de refuerzo para mejorar en los temas de las preguntas incorrectas:\n\n                                    ${actividadData.preguntasIncorrectas.map((pregunta, index) => `\n                                    Pregunta ${index + 1} (Número ${pregunta.numero}): ${pregunta.pregunta}\n                                    Respuesta seleccionada: ${pregunta.respuestaSeleccionada} (incorrecta)\n                                    Respuesta correcta: ${pregunta.respuestaCorrecta}\n                                    `).join('\\n')}\n\n                                    Identifica los temas de los errores y propone una actividad práctica y breve (máximo 200 palabras) que aborde todos los temas. Comienza con \"¡Vamos a reforzar tus conocimientos!\" and usa un tono motivador. No menciones libros ni materiales externos.\n                                `;\n\n                                console.log('Prompt para actividad de refuerzo:', promptRefuerzo);\n\n                                $.ajax({\n                                    url: API_tutor, // Usar variable para endpoint de generación\n                                    method: 'POST',\n                                    contentType: 'application/json',\n                                    data: JSON.stringify({\n                                        instruccion: \"Proporciona una actividad de refuerzo basada en los errores del estudiante.\",\n                                        entrada: promptRefuerzo,\n                                        max_nuevos_tokens: 256\n                                    }),\n                                    success: function (response) {\n                                        console.log('Respuesta de la API /generar (refuerzo):', response);\n\n                                        if (response.respuesta) {\n                                            var actividadFormateada = response.respuesta.replace(/\\n/g, '<br>');\n                                            var mensaje = `<p><strong>Tutor:</strong><br><strong>Actividad de refuerzo:</strong><br>${actividadFormateada}</p>`;\n                                            messagesDiv.append(mensaje);\n                                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                        } else {\n                                            messagesDiv.append('<p><strong>Tutor:</strong> Error: No se pudo generar la actividad de refuerzo.</p>');\n                                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                        }\n                                    },\n                                    error: function (xhr, status, error) {\n                                        console.log('Error al obtener actividad de refuerzo:', { xhr, status, error, responseText: xhr.responseText });\n                                        messagesDiv.append('<p><strong>Tutor:</strong> Error al generar actividad de refuerzo: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                                        messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                                    }\n                                });\n                            }\n                        }).catch(error => {\n                            console.log('Error al procesar retroalimentaciones detalladas:', error);\n                            messagesDiv.append('<p><strong>Tutor:</strong> Error al procesar retroalimentaciones: ' + error + '</p>');\n                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                        });\n                    }\n                } else {\n                    // Retroalimentación para tareas\n                    $.ajax({\n                        url: API_tutor, // Usar variable para endpoint de generación\n                        method: 'POST',\n                        contentType: 'application/json',\n                        data: JSON.stringify({\n                            instruccion: instruccionRetro,\n                            entrada: JSON.stringify(actividadData),\n                            max_nuevos_tokens: 256\n                        }),\n                        success: function (response) {\n                            console.log('Respuesta de la API /generar (tarea):', response);\n\n                            if (response.respuesta) {\n                                var retroalimentacionFormateada = response.respuesta.replace(/\\n/g, '<br>');\n                                var mensaje = `<p><strong>Tutor:</strong> Hola ${actividadData.name}, aquí tienes la retroalimentación para \"${actividadData.actividad}\":<br>${retroalimentacionFormateada}</p>`;\n                                messagesDiv.append(mensaje);\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            } else {\n                                messagesDiv.append('<p><strong>Tutor:</strong> Error: Respuesta inválida de la API.</p>');\n                                messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                            }\n                        },\n                        error: function (xhr, status, error) {\n                            console.log('Error al obtener retroalimentación de tarea:', { xhr, status, error, responseText: xhr.responseText });\n                            messagesDiv.append('<p><strong>Tutor:</strong> Error al obtener retroalimentación: ' + error + ' (Código: ' + xhr.status + ') - ' + (xhr.responseText || 'Sin detalles') + '</p>');\n                            messagesDiv.scrollTop(messagesDiv[0].scrollHeight);\n                        }\n                    });\n                }\n            }\n\n            // Ejecutar la obtención de retroalimentación al cargar el bloque\n            obtenerRetroalimentacion();\n        }\n    };\n});"],"names":["define","$","API_tutor","API_Moodle","init","userid","courseid","cmid","modname","params","queryString","fullUrl","messagesDiv","enviarDatosParaRetroalimentacion","actividadData","append","scrollTop","scrollHeight","preguntasIncorrectas","length","remainingAttempts","promptApoyo","map","pregunta","index","numero","join","console","log","ajax","url","method","contentType","data","JSON","stringify","instruccion","entrada","max_nuevos_tokens","success","response","respuesta","mensaje","replace","error","xhr","status","responseText","promesas","prompt","respuestaSeleccionada","respuestaCorrecta","opciones","Promise","all","then","grade","promptRefuerzo","catch","retroalimentacionFormateada","name","actividad","wstoken","wsfunction","moodlewsrestformat","param","dataType","usergrades","forEach","user","gradeitems","item","graderaw","userfullname","itemname","feedback","feedbackformat","tempDiv","html","text","paramsContext","queryStringContext","fullUrlContext","contextData","cm","instance","id","quizid","attempts","attemptId","maxAttempts","attemptsMade","paramsAttempt","attemptid","page","queryStringAttempt","fullUrlAttempt","attemptData","warnings","message","questions","question","preguntaMatch","match","numeroPregunta","questionnumber","estado","estadoInterno","state","respuestaSeleccionadaMatch","respuestaCorrectaMatch","opcionesMatches","matchAll","push","obtenerDatosCuestionario","paramsAssignment","courseids","queryStringAssignment","fullUrlAssignment","assignmentData","assignment","courses","course","assignments","assign","title","description","intro","introformat","paramsSubmission","assignmentids","queryStringSubmission","fullUrlSubmission","submissionData","entregaEstudiante","submissions","find","sub","submissionStatus","obtenerDatosTarea"],"mappings":"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"}